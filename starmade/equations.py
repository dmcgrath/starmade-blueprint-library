"""A set of equations for calculating various values for a starmade entity."""

# For example, thrust and max speed given mass and number of thrusters.

# Returns the maximum possible power recharge rate based upon number of power
# modules and maximum dimensions of the containing area.
def calc_power_output(block_count, ship_dimensions):
    """ Calculate power output given Power Reactor count and max dimensions

    Given the number of Power Reactors and the sum of an areas x, y and z
    dimensions, this function will return the maximum possible power recharge
    rate that can be achieved.

    Args:
        block_count: The number of Power Reactors (block id 2)
        ship_dimensions: The sum of a ships maximum X, Y and Z dimensions

    Returns:
        A float for the maximum possible 'e/sec' recharge rate
    """
    block_power = block_count * 25.0
    max_dimensions = block_count + 2.0
    if max_dimensions > ship_dimensions:
        remainder_dimensions = (block_count % (ship_dimensions-2.0)) + 2.0
        max_mod = (block_count - remainder_dimensions - 2.0)
        max_mod /= (ship_dimensions-2.0)
        group_power = pow(ship_dimensions/3.0,1.7) * max_mod
        group_power += pow(remainder_dimensions/3.0,1.7)
        size_power = 2.0/(1.0+pow(1.000696,-0.333*group_power))-1.0
        size_power *= 1000000.0
    else:
        size_power = 2/(1+pow(1.000696,-0.333*pow(max_dimensions/3.0,1.7)))-1.0
        size_power *= 1000000.0

    return block_power + size_power

def calc_power_capacity(block_count):
    """ Calculate the power capacity of a contiguous group of power capacitors

    Given the number of Power Capacitors, this function will return the total
    power storage they will support.

    Args:
        block_count: The number of Power Capacitors (block id 331)

    Returns:
        A float for the maximum possible 'e' power storage
    """
    return 1000.0 * pow(block_count, 1.05)

def calc_thrust(block_count):
    """ Calculate the thrust value generated by a number of Thruster Modules

    Given the number of Thruster Modules, this function will return the amount
    of thrust generated.

    Args:
        block_count: The number of Thruster Modukes (block id 25)

    Returns:
        A float for the amount of thrust
    """
    return pow(block_count * 5.5, 0.87) * 0.75

def calc_speed_coefficient(thrust, total_mass):
    """ Calculate a ships maximum speed multipler for the server speed limit

    The maximum speed a ship can achieve on a server is a combination of the
    thrust:mass ratio of the ship and the server speed limit. This function
    returns a cofficient between 0.5 and 3.0 that when multiplied with the
    server's speed limit will give you the ships maximum speed.

    Args:
        thrust: A float that represents the thrust of a ship. See calc_thrust()

    Returns:
        A float between (inclusive) 0.5 and 3.0. The max speed cofficient
    """
    return min(thrust / total_mass, 2.5) + 0.5

def calc_thrust_power(block_count):
    """ Calculate the power in 'e/sec' consumed when using a ships thrusters

    Given the number of Thruster Modules, this function will return the power
    per second (e/sec) consumed when thrusters are active.

    Args:
        block_count: The number of Thruster Modukes (block id 25)

    Returns:
        A float for 'e/sec' usage of active thrusters
    """
    return block_count / 0.03

def calc_shield_capacity(block_count):
    """ Calculate the maximum shield capacity by a number of Shield Capacitors

    Given the number of Shield Capacitors, this function will return the
    maximum amount of Shield Capacity 'C' they support.

    Args:
        block_count: The number of Shield Capacitors (block id 3)

    Returns:
        A float for the maximum shield capacity 'C'
    """
    return pow(block_count, 0.9791797578) * 110.0 + 220.0

def calc_shield_recharge(block_count):
    """ Calculate the shield recharge rate for a number of Shield Rechargers

    Given the number of Shield Rechargers, this function will return the
    rate of shield capacity charging 'C/sec' they generate.

    Args:
        block_count: The number of Shield Rechargers (block id 478)

    Returns:
        A float for the shield recharge rate in 'C/sec'
    """
    return block_count * 5.5

def calc_shield_power(block_count, active=False):
    """ Calculate the power usage of Shield Rechargers

    Given the number of Shield Rechargers, this function will calculate how
    much power they draw in 'e/sec'. It will calculate both inactive 
    (shields full) and active (shields charging) power consumption based on
    the 'active' flag setting.

    Args:
        block_count: The number of Shield Rechargers (block id 478)
        active: A boolean. True=actively recharging, False=for not (default)

    Returns:
        A float for 'e/sec' usage of active/inactive Shield Rechargers
    """
    if active:
        return block_count * 55.0 
    else:
        return block_count * 5.5

def calc_jump_power(block_count, total_mass):
    """ Calculate the power required to fully charge the jump drive of a ship

    Given the number of Jump Modules and total ship mass, this function will
    calculate the total power required to fully charge the jump drive.

    Args:
        block_count: The number of Jump Drive Modules (block id 545)
        total_mass: The total mass of the ship

    Returns:
        A float for total power 'e' required to charge the jump drive
    """
    ideal = math.ceil(total_mass * 0.5)
    a = 50.0 - 100.0 * block_count * total_mass
    return (-0.24 * total_mass)*a*a + 4600.0*a + 230000.0 + 1200.0 * ideal

def calc_jump_time(jump_power, block_count):
    """ Calculate the time required to fully charge the jump drive of a ship

    Given the number of Jump Modules and total ship mass, this function will
    calculate the total time required to fully charge the jump drive.

    Args:
        block_count: The number of Jump Drive Modules (block id 545)
        total_mass: The total mass of the ship

    Returns:
        a float for seconds required to charge the jump drive
    """
    return jump_power / (10000.0 + 50.0 * block_count)
